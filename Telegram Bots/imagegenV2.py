# By @itzAsuraa 
#Distribute and edit it as your wish but please don't remove credit
#By stealing Credit of Developer you will not become pro so try to give full credit to Developer


from pyrogram import Client, filters
import aiohttp

# Store user state to track if they are awaiting a query for the draw command
user_states = {}

@app.on_message(filters.command("draw") & filters.group)
async def ask_for_query(client, message):
    # Check if a query is provided directly with the /draw command
    if len(message.command) == 1:  # If no query is provided
        user_states[message.from_user.id] = 'awaiting_query'
        await message.reply("**Please provide a query to generate an image.**")
    else:
        # If the query is provided, process it directly
        query = " ".join(message.command[1:])
        await generate_image(client, message, query)


async def generate_image(client, message, query):
    # Updated URL to use the new API endpoint
    url = f"https://text2imgv2.codesearch.workers.dev/prompt={query}"
    
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            # Check if the response is successful
            if response.status == 200:
                data = await response.json()
                image_url = data.get("image")
                if image_url:
                    caption = f"**Image generated by {message.from_user.mention}**"
                    await message.reply_photo(photo=image_url, caption=caption)
                else:
                    await message.reply("**Sorry, I couldn't generate an image for your query.**")
            else:
                await message.reply("**Error in generating image. Please try again later.**")
    
    # Clear user state after processing
    user_states.pop(message.from_user.id, None)